[
  {
    "_id": {
      "$oid": "6877ce90652ecbda450181e0"
    },
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string, find the length of the longest substring without repeating characters.",
    "difficulty": "Medium",
    "tags": ["string", "sliding window"],
    "createdBy": "6877ce1cde4c8b4701e20aa1",
    "testcases": [
      {
        "input": "abcabcbb",
        "output": "3",
        "explanation": "The answer is \"abc\", with the length of 3."
      },
      {
        "input": "bbbbb",
        "output": "1",
        "explanation": "The answer is \"b\", with the length of 1."
      },
      {
        "input": "pwwkew",
        "output": "3",
        "explanation": "The answer is \"wke\", with the length of 3."
      }
    ],
    "hiddenTestcases": [
      {
        "input": "abcdef",
        "output": "6"
      },
      {
        "input": "",
        "output": "0"
      }
    ],
    "constraints": [
      "0 <= s.length <= 5 * 10^4",
      "s consists of English letters, digits, symbols and spaces."
    ],
    "examples": [
      {
        "input": "abcabcbb",
        "output": "3",
        "explanation": "The answer is \"abc\", with the length of 3."
      }
    ],
    "boilerplate": {
      "c": "int lengthOfLongestSubstring(char* s) {\n    // your code here\n}",
      "cpp": "int lengthOfLongestSubstring(string s) {\n    // your code here\n}",
      "python": "def lengthOfLongestSubstring(s):\n    # your code here\n    pass",
      "javascript": "function lengthOfLongestSubstring(s) {\n    // your code here\n}",
      "java": "public int lengthOfLongestSubstring(String s) {\n    // your code here\n}"
    },
    "harness": {
      "c": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n// USER_CODE\nint main() {\n    char s[50001];\n    scanf(\"%s\", s);\n    printf(\"%d\\n\", lengthOfLongestSubstring(s));\n    return 0;\n}",
      "cpp": "#include <iostream>\n#include <string>\n#include <unordered_set>\nusing namespace std;\n// USER_CODE\nint main() {\n    string s;\n    cin >> s;\n    cout << lengthOfLongestSubstring(s) << endl;\n    return 0;\n}"
    }
  },
  {
    "_id": {
      "$oid": "6877ce90652ecbda450181e8"
    },
    "title": "Container With Most Water",
    "description": "Given n non-negative integers a1, a2, ..., an, find two lines that together with the x-axis form a container, such that the container contains the most water.",
    "difficulty": "Medium",
    "tags": ["array", "two pointers"],
    "createdBy": "6877ce1cde4c8b4701e20aa1",
    "testcases": [
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. The max area of water the container can contain is 49."
      },
      {
        "input": "[1,1]",
        "output": "1",
        "explanation": "The above vertical lines are represented by array [1,1]. The max area of water the container can contain is 1."
      }
    ],
    "hiddenTestcases": [
      {
        "input": "[1,2,1]",
        "output": "2"
      },
      {
        "input": "[2,3,4,5,18,17,6]",
        "output": "17"
      }
    ],
    "constraints": ["n >= 2", "0 <= height[i] <= 3 * 10^4"],
    "examples": [
      {
        "input": "[1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. The max area of water the container can contain is 49."
      }
    ],
    "boilerplate": {
      "c": "int maxArea(int* height, int heightSize) {\n    // your code here\n}",
      "cpp": "int maxArea(vector<int>& height) {\n    // your code here\n}",
      "python": "def maxArea(height):\n    # your code here\n    pass",
      "javascript": "function maxArea(height) {\n    // your code here\n}",
      "java": "public int maxArea(int[] height) {\n    // your code here\n}"
    },
    "harness": {
      "c": "#include <stdio.h>\n#include <stdlib.h>\n// USER_CODE\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int* height = (int*)malloc(n * sizeof(int));\n    for (int i = 0; i < n; i++) scanf(\"%d\", &height[i]);\n    printf(\"%d\\n\", maxArea(height, n));\n    free(height);\n    return 0;\n}",
      "cpp": "#include <iostream>\n#include <vector>\nusing namespace std;\n// USER_CODE\nint main() {\n    int n;\n    cin >> n;\n    vector<int> height(n);\n    for (int i = 0; i < n; i++) cin >> height[i];\n    cout << maxArea(height) << endl;\n    return 0;\n}"
    }
  },
  {
    "_id": {
      "$oid": "6877ce90652ecbda450181e9"
    },
    "title": "Integer to Roman",
    "description": "Convert an integer to a Roman numeral.",
    "difficulty": "Medium",
    "tags": ["math", "string"],
    "createdBy": "6877ce1cde4c8b4701e20aa1",
    "testcases": [
      {
        "input": "3",
        "output": "III",
        "explanation": "3 is represented as 3 ones."
      },
      {
        "input": "58",
        "output": "LVIII",
        "explanation": "L = 50, V = 5, III = 3."
      },
      {
        "input": "1994",
        "output": "MCMXCIV",
        "explanation": "M = 1000, CM = 900, XC = 90 and IV = 4."
      }
    ],
    "hiddenTestcases": [
      {
        "input": "9",
        "output": "IX"
      },
      {
        "input": "27",
        "output": "XXVII"
      }
    ],
    "constraints": ["1 <= num <= 3999"],
    "examples": [
      {
        "input": "3",
        "output": "III",
        "explanation": "3 is represented as 3 ones."
      }
    ],
    "boilerplate": {
      "c": "char* intToRoman(int num) {\n    // your code here\n}",
      "cpp": "string intToRoman(int num) {\n    // your code here\n}",
      "python": "def intToRoman(num):\n    # your code here\n    pass",
      "javascript": "function intToRoman(num) {\n    // your code here\n}",
      "java": "public String intToRoman(int num) {\n    // your code here\n}"
    },
    "harness": {
      "c": "#include <stdio.h>\n#include <stdlib.h>\n// USER_CODE\nint main() {\n    int num;\n    scanf(\"%d\", &num);\n    char* result = intToRoman(num);\n    printf(\"%s\\n\", result);\n    return 0;\n}",
      "cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n// USER_CODE\nint main() {\n    int num;\n    cin >> num;\n    cout << intToRoman(num) << endl;\n    return 0;\n}"
    }
  },
  {
    "_id": {
      "$oid": "6877ce90652ecbda450181e4"
    },
    "title": "Reverse Integer",
    "description": "Given a signed 32-bit integer x, return x with its digits reversed.",
    "difficulty": "Medium",
    "tags": ["math"],
    "createdBy": "6877ce1cde4c8b4701e20aa1",
    "testcases": [
      {
        "input": "123",
        "output": "321",
        "explanation": "The reverse of 123 is 321."
      },
      {
        "input": "-123",
        "output": "-321",
        "explanation": "The reverse of -123 is -321."
      },
      {
        "input": "120",
        "output": "21",
        "explanation": "The reverse of 120 is 21."
      }
    ],
    "hiddenTestcases": [
      {
        "input": "1534236469",
        "output": "0"
      },
      {
        "input": "-2147483648",
        "output": "0"
      }
    ],
    "constraints": ["-2^31 <= x <= 2^31 - 1"],
    "examples": [
      {
        "input": "123",
        "output": "321",
        "explanation": "The reverse of 123 is 321."
      }
    ],
    "boilerplate": {
      "c": "int reverse(int x) {\n    // your code here\n}",
      "cpp": "int reverse(int x) {\n    // your code here\n}",
      "python": "def reverse(x):\n    # your code here\n    pass",
      "javascript": "function reverse(x) {\n    // your code here\n}",
      "java": "public int reverse(int x) {\n    // your code here\n}"
    },
    "harness": {
      "c": "#include <stdio.h>\n// USER_CODE\nint main() {\n    int x;\n    scanf(\"%d\", &x);\n    printf(\"%d\\n\", reverse(x));\n    return 0;\n}",
      "cpp": "#include <iostream>\nusing namespace std;\n// USER_CODE\nint main() {\n    int x;\n    cin >> x;\n    cout << reverse(x) << endl;\n    return 0;\n}"
    }
  },
  {
    "_id": {
      "$oid": "6877ce90652ecbda450181e6"
    },
    "title": "Palindrome Number",
    "description": "Given an integer x, return true if x is a palindrome, and false otherwise.",
    "difficulty": "Easy",
    "tags": ["math"],
    "createdBy": "6877ce1cde4c8b4701e20aa1",
    "testcases": [
      {
        "input": "121",
        "output": "true",
        "explanation": "121 reads as 121 from left to right and from right to left."
      },
      {
        "input": "-121",
        "output": "false",
        "explanation": "From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome."
      },
      {
        "input": "10",
        "output": "false",
        "explanation": "Reads 01 from right to left. Therefore it is not a palindrome."
      }
    ],
    "hiddenTestcases": [
      {
        "input": "0",
        "output": "true"
      },
      {
        "input": "1221",
        "output": "true"
      }
    ],
    "constraints": ["-2^31 <= x <= 2^31 - 1"],
    "examples": [
      {
        "input": "121",
        "output": "true",
        "explanation": "121 reads as 121 from left to right and from right to left."
      }
    ],
    "boilerplate": {
      "c": "bool isPalindrome(int x) {\n    // your code here\n}",
      "cpp": "bool isPalindrome(int x) {\n    // your code here\n}",
      "python": "def isPalindrome(x):\n    # your code here\n    pass",
      "javascript": "function isPalindrome(x) {\n    // your code here\n}",
      "java": "public boolean isPalindrome(int x) {\n    // your code here\n}"
    },
    "harness": {
      "c": "#include <stdio.h>\n#include <stdbool.h>\n// USER_CODE\nint main() {\n    int x;\n    scanf(\"%d\", &x);\n    printf(\"%s\\n\", isPalindrome(x) ? \"true\" : \"false\");\n    return 0;\n}",
      "cpp": "#include <iostream>\nusing namespace std;\n// USER_CODE\nint main() {\n    int x;\n    cin >> x;\n    cout << (isPalindrome(x) ? \"true\" : \"false\") << endl;\n    return 0;\n}"
    }
  },
  {
    "_id": {
      "$oid": "6877ce90652ecbda450181dd"
    },
    "title": "Find the Maximum Length of Valid Subsequence I",
    "description": "Given an array of integers, find the maximum length of a valid subsequence according to the problem's rules.",
    "difficulty": "Medium",
    "tags": ["array", "subsequence"],
    "createdBy": "6877ce1cde4c8b4701e20aa1",
    "testcases": [
      {
        "input": "[1,2,3,4]",
        "output": "4",
        "explanation": "The entire array forms a valid subsequence."
      },
      {
        "input": "[1,2,1,1,2,1,2]",
        "output": "6",
        "explanation": "We can choose [1,2,1,2,1,2] which has length 6."
      }
    ],
    "hiddenTestcases": [
      {
        "input": "[1,1,1,1]",
        "output": "4"
      },
      {
        "input": "[1,2,3,2,1]",
        "output": "4"
      }
    ],
    "constraints": ["1 <= nums.length <= 2 * 10^5", "1 <= nums[i] <= 2"],
    "examples": [
      {
        "input": "[1,2,3,4]",
        "output": "4",
        "explanation": "The entire array forms a valid subsequence."
      }
    ],
    "boilerplate": {
      "c": "int maximumLength(int* nums, int numsSize) {\n    // your code here\n}",
      "cpp": "int maximumLength(vector<int>& nums) {\n    // your code here\n}",
      "python": "def maximumLength(nums):\n    # your code here\n    pass",
      "javascript": "function maximumLength(nums) {\n    // your code here\n}",
      "java": "public int maximumLength(int[] nums) {\n    // your code here\n}"
    },
    "harness": {
      "c": "#include <stdio.h>\n#include <stdlib.h>\n// USER_CODE\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int* nums = (int*)malloc(n * sizeof(int));\n    for (int i = 0; i < n; i++) scanf(\"%d\", &nums[i]);\n    printf(\"%d\\n\", maximumLength(nums, n));\n    free(nums);\n    return 0;\n}",
      "cpp": "#include <iostream>\n#include <vector>\nusing namespace std;\n// USER_CODE\nint main() {\n    int n;\n    cin >> n;\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) cin >> nums[i];\n    cout << maximumLength(nums) << endl;\n    return 0;\n}"
    }
  },
  {
    "_id": {
      "$oid": "6877ce90652ecbda450181de"
    },
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
    "difficulty": "Easy",
    "tags": ["array", "hashmap"],
    "createdBy": "6877ce1cde4c8b4701e20aa1",
    "testcases": [
      {
        "input": "[2,7,11,15]\n9",
        "output": "[0,1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      },
      {
        "input": "[3,2,4]\n6",
        "output": "[1,2]",
        "explanation": "Because nums[1] + nums[2] == 6, we return [1, 2]."
      },
      {
        "input": "[3,3]\n6",
        "output": "[0,1]",
        "explanation": "Because nums[0] + nums[1] == 6, we return [0, 1]."
      }
    ],
    "hiddenTestcases": [
      {
        "input": "[1,2,3,4,5]\n8",
        "output": "[2,4]"
      },
      {
        "input": "[-1,-2,-3,-4,-5]\n-8",
        "output": "[2,4]"
      }
    ],
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "examples": [
      {
        "input": "[2,7,11,15]\n9",
        "output": "[0,1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      }
    ],
    "boilerplate": {
      "c": "int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    // your code here\n}",
      "cpp": "vector<int> twoSum(vector<int>& nums, int target) {\n    // your code here\n}",
      "python": "def twoSum(nums, target):\n    # your code here\n    pass",
      "javascript": "function twoSum(nums, target) {\n    // your code here\n}",
      "java": "public int[] twoSum(int[] nums, int target) {\n    // your code here\n}"
    },
    "harness": {
      "c": "#include <stdio.h>\n#include <stdlib.h>\n// USER_CODE\nint main() {\n    int n, target;\n    scanf(\"%d\", &n);\n    int* nums = (int*)malloc(n * sizeof(int));\n    for (int i = 0; i < n; i++) scanf(\"%d\", &nums[i]);\n    scanf(\"%d\", &target);\n    int returnSize;\n    int* result = twoSum(nums, n, target, &returnSize);\n    printf(\"[%d,%d]\\n\", result[0], result[1]);\n    free(nums);\n    free(result);\n    return 0;\n}",
      "cpp": "#include <iostream>\n#include <vector>\nusing namespace std;\n// USER_CODE\nint main() {\n    int n, target;\n    cin >> n;\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) cin >> nums[i];\n    cin >> target;\n    vector<int> result = twoSum(nums, target);\n    cout << \"[\" << result[0] << \",\" << result[1] << \"]\" << endl;\n    return 0;\n}"
    }
  },
  {
    "_id": {
      "$oid": "6877ce90652ecbda450181e2"
    },
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s.",
    "difficulty": "Medium",
    "tags": ["string", "dynamic programming"],
    "createdBy": "6877ce1cde4c8b4701e20aa1",
    "testcases": [
      {
        "input": "babad",
        "output": "bab",
        "explanation": "\"aba\" is also a valid answer."
      },
      {
        "input": "cbbd",
        "output": "bb",
        "explanation": "The longest palindromic substring is \"bb\"."
      }
    ],
    "hiddenTestcases": [
      {
        "input": "ac",
        "output": "a"
      },
      {
        "input": "racecar",
        "output": "racecar"
      }
    ],
    "constraints": [
      "1 <= s.length <= 1000",
      "s consist of only digits and English letters."
    ],
    "examples": [
      {
        "input": "babad",
        "output": "bab",
        "explanation": "\"aba\" is also a valid answer."
      }
    ],
    "boilerplate": {
      "c": "char* longestPalindrome(char* s) {\n    // your code here\n}",
      "cpp": "string longestPalindrome(string s) {\n    // your code here\n}",
      "python": "def longestPalindrome(s):\n    # your code here\n    pass",
      "javascript": "function longestPalindrome(s) {\n    // your code here\n}",
      "java": "public String longestPalindrome(String s) {\n    // your code here\n}"
    },
    "harness": {
      "c": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n// USER_CODE\nint main() {\n    char s[1001];\n    scanf(\"%s\", s);\n    char* result = longestPalindrome(s);\n    printf(\"%s\\n\", result);\n    return 0;\n}",
      "cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n// USER_CODE\nint main() {\n    string s;\n    cin >> s;\n    cout << longestPalindrome(s) << endl;\n    return 0;\n}"
    }
  },
  {
    "_id": {
      "$oid": "6877ce90652ecbda450181e3"
    },
    "title": "Zigzag Conversion",
    "description": "Convert a given string to a zigzag pattern on a given number of rows.",
    "difficulty": "Medium",
    "tags": ["string", "simulation"],
    "createdBy": "6877ce1cde4c8b4701e20aa1",
    "testcases": [
      {
        "input": "PAYPALISHIRING\n3",
        "output": "PAHNAPLSIIGYIR",
        "explanation": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on 3 rows."
      },
      {
        "input": "PAYPALISHIRING\n4",
        "output": "PINALSIGYAHRPI",
        "explanation": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on 4 rows."
      },
      {
        "input": "A\n1",
        "output": "A",
        "explanation": "Single character on single row."
      }
    ],
    "hiddenTestcases": [
      {
        "input": "AB\n1",
        "output": "AB"
      },
      {
        "input": "ABCD\n2",
        "output": "ACBD"
      }
    ],
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of English letters (lower-case and upper-case), ',' and '.'.",
      "1 <= numRows <= 1000"
    ],
    "examples": [
      {
        "input": "PAYPALISHIRING\n3",
        "output": "PAHNAPLSIIGYIR",
        "explanation": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on 3 rows."
      }
    ],
    "boilerplate": {
      "c": "char* convert(char* s, int numRows) {\n    // your code here\n}",
      "cpp": "string convert(string s, int numRows) {\n    // your code here\n}",
      "python": "def convert(s, numRows):\n    # your code here\n    pass",
      "javascript": "function convert(s, numRows) {\n    // your code here\n}",
      "java": "public String convert(String s, int numRows) {\n    // your code here\n}"
    },
    "harness": {
      "c": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n// USER_CODE\nint main() {\n    char s[1001];\n    int numRows;\n    scanf(\"%s\", s);\n    scanf(\"%d\", &numRows);\n    char* result = convert(s, numRows);\n    printf(\"%s\\n\", result);\n    return 0;\n}",
      "cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n// USER_CODE\nint main() {\n    string s;\n    int numRows;\n    cin >> s >> numRows;\n    cout << convert(s, numRows) << endl;\n    return 0;\n}"
    }
  },
  {
    "_id": {
      "$oid": "6877ce90652ecbda450181df"
    },
    "title": "Add Two Numbers",
    "description": "You are given two non-empty linked lists representing two non-negative integers. Add the two numbers and return the sum as a linked list.",
    "difficulty": "Medium",
    "tags": ["linked list", "math"],
    "createdBy": "6877ce1cde4c8b4701e20aa1",
    "testcases": [
      {
        "input": "2 4 3\n5 6 4",
        "output": "7 0 8",
        "explanation": "342 + 465 = 807"
      },
      {
        "input": "0\n0",
        "output": "0",
        "explanation": "0 + 0 = 0"
      }
    ],
    "hiddenTestcases": [
      {
        "input": "9 9 9 9 9 9 9\n9 9 9 9",
        "output": "8 9 9 9 0 0 0 1"
      }
    ],
    "constraints": [
      "The number of nodes in each linked list is in the range [1, 100].",
      "0 <= Node.val <= 9",
      "It is guaranteed that the list represents a number that does not have leading zeros."
    ],
    "examples": [
      {
        "input": "2 4 3\n5 6 4",
        "output": "7 0 8",
        "explanation": "342 + 465 = 807"
      }
    ],
    "boilerplate": {
      "cpp": "ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n    // your code here\n}",
      "python": "def addTwoNumbers(l1, l2):\n    # your code here\n    pass",
      "javascript": "function addTwoNumbers(l1, l2) {\n    // your code here\n}",
      "java": "public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    // your code here\n}"
    },
    "harness": {
      "cpp": "#include <iostream>\n#include <sstream>\n#include <string>\nusing namespace std;\nstruct ListNode { int val; ListNode* next; ListNode(int x) : val(x), next(nullptr) {} };\n// USER_CODE\nListNode* buildList() {\n    std::string line;\n    if (!std::getline(std::cin, line)) return nullptr;\n    std::istringstream iss(line);\n    int x;\n    ListNode dummy(0), *cur = &dummy;\n    while (iss >> x) cur = cur->next = new ListNode(x);\n    return dummy.next;\n}\nvoid printList(ListNode* head) { while (head) { cout << head->val; if (head->next) cout << \" \"; head = head->next; } cout << endl; }\nint main() {\n    ListNode* l1 = buildList();\n    ListNode* l2 = buildList();\n    ListNode* res = addTwoNumbers(l1, l2);\n    printList(res);\n    return 0;\n}\n"
    }
  }
]
